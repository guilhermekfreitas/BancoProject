/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadCliente.java
 *
 * Created on 05/09/2010, 15:43:53
 */

package banco.cliente.view;

import java.io.*;
import java.net.*;
import javax.swing.*;
import java.awt.event.*;

import banco.cliente.controller.CadastroIncompletoException;
import banco.cliente.controller.ClienteController;
import banco.cliente.controller.ConexaoException;
import banco.cliente.controller.ErroCadastroException;
import banco.cliente.deprecated.Login;
import banco.cliente.modelo.Cliente;
/**
 *
 * @author usuariio
 */
public class CadClienteView extends JFrame {

    private JButton btnCadastrar;
    private JButton btnCancelar;
    private JLabel lbConta;
    private JLabel lbCpf;
    private JLabel lbDtNascimento;
    private JLabel lbLogin;
    private JLabel lbNome;
    private JLabel lbRG;
    private JLabel lbSenha;
    private JPasswordField pfSenha;
    private JTextField tfConta;
    private JTextField tfCpf;
    private JTextField tfDtNascimento;
    private JTextField tfLogin;
    private JTextField tfNome;
    private JTextField tfRG;
	
    /** Creates new form CadCliente */
    public CadClienteView() {
        initComponents();
        int conta = 100000 + (int)(Math.random() *999999);
        tfConta.setText(Integer.toString(conta));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbNome = new JLabel();
        lbCpf = new JLabel();
        lbDtNascimento = new JLabel();
        lbConta = new JLabel();
        tfNome = new JTextField();
        tfCpf = new JTextField();
        tfDtNascimento = new JTextField();
        tfConta = new JTextField();
        lbLogin = new JLabel();
        lbSenha = new JLabel();
        tfLogin = new JTextField();
        pfSenha = new JPasswordField();
        btnCadastrar = new JButton();
        btnCancelar = new JButton();
        tfRG = new JTextField();
        lbRG = new JLabel();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Cliente");
        setResizable(false);

        lbNome.setText("Nome: ");

        lbCpf.setText("CPF: ");

        lbDtNascimento.setText("Data de nascimento: ");

        lbConta.setText("Nº da Conta: ");

        tfConta.setBackground(new java.awt.Color(157, 151, 146));
        tfConta.setEditable(false);

        lbLogin.setText("Login: ");

        lbSenha.setText("Senha: ");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lbRG.setText("RG: ");

        configuraLayout();
    }// </editor-fold>//GEN-END:initComponents

	private void configuraLayout() {
		GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lbConta)
                    .addComponent(lbDtNascimento)
                    .addComponent(lbLogin)
                    .addComponent(lbSenha)
                    .addComponent(lbNome)
                    .addComponent(lbCpf)
                    .addComponent(lbRG))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(tfRG, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(tfDtNascimento, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(tfConta, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(tfLogin, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(pfSenha, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(tfCpf, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                        .addContainerGap(163, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfNome, GroupLayout.PREFERRED_SIZE, 244, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(btnCadastrar)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNome)
                    .addComponent(tfNome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCpf, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCpf))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(tfRG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRG))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDtNascimento)
                    .addComponent(tfDtNascimento, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lbConta)
                    .addComponent(tfConta, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbLogin)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbSenha))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfLogin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pfSenha, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnCadastrar))
                .addContainerGap())
        );

        pack();
	}

    public JTextField getTfRG() {
        return tfRG;
    }

    public void setTfRG(JTextField tfRG) {
        this.tfRG = tfRG;
    }

    public JTextField getTfConta() {
        return tfConta;
    }

    public void setTfConta(JTextField tfConta) {
        this.tfConta = tfConta;
    }

    public JTextField getTfCpf() {
        return tfCpf;
    }

    public void setTfCpf(JTextField tfCpf) {
        this.tfCpf = tfCpf;
    }

    public JTextField getTfLogin() {
        return tfLogin;
    }

    public void setTfLogin(JTextField tfLogin) {
        this.tfLogin = tfLogin;
    }

    public JTextField getTfNome() {
        return tfNome;
    }

    public void setTfNome(JTextField tfNome) {
        this.tfNome = tfNome;
    }

    private void btnCancelarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
        Login login = new Login();
        login.setLocationRelativeTo(null);
        login.setVisible(true);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnCadastrarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        
    	Cliente cliente = new Cliente();
    	cliente.setNome(tfNome.getText()); 
        cliente.setCpf(tfCpf.getText());
        cliente.setRg(tfRG.getText());
        cliente.setDataNasc(tfDtNascimento.getText());
        cliente.setNumConta(tfConta.getText());
        cliente.setLogin(tfLogin.getText());
        cliente.setSenha(new String(pfSenha.getPassword()));
        
//    	String Cpf = tfCpf.getText();
//        String RG = tfRG.getText();
//        String DtNasc = tfDtNascimento.getText();
//        String Conta = tfConta.getText();
//        String Login = tfLogin.getText();
//        String Senha = new String(pfSenha.getPassword());
        
        ClienteController controller = new ClienteController(LoginView.servidorA);
        
        try
        {
        	controller.cadastraCliente(cliente);
        
        	
        	JOptionPane.showMessageDialog(null, "Cadastro efetuado com sucesso!", "", JOptionPane.OK_OPTION);
        	dispose();
        	
            Login login = new Login();
            login.setLocationRelativeTo(null);
            login.setVisible(true);
            
        } catch ( CadastroIncompletoException exc ){
        	exibeDialogErro(exc.getMessage());
//        	JOptionPane.showMessageDialog(null, exc.getMessage(), "Erro!", JOptionPane.OK_OPTION);
        } catch ( ErroCadastroException exc ){
        	exibeDialogErro(exc.getMessage());
//        	JOptionPane.showMessageDialog(null, exc.getMessage(), "Erro!", JOptionPane.OK_OPTION);
        } catch ( ConexaoException exc ){
        	exibeDialogErro(exc.getMessage());
//        	JOptionPane.showMessageDialog(null, exc.getMessage(), "Erro!", JOptionPane.OK_OPTION);
        }
        
        
//        String msg = "2 "+Nome+" "+Cpf+" "+RG+" "+DtNasc+" "+Conta+" "+Login+" "+Senha;
//        String resposta = "";
//        Socket socket = null;
//        int servidor = 1 + (int)(Math.random() *3);
//        System.out.println(servidor);
//        boolean valida = true;
//
//        if(Nome.equals("")||Nome.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo Nome em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(Cpf.equals("")||Cpf.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo CPF em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(RG.equals("")||RG.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo RG em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(DtNasc.equals("")||DtNasc.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo Data de nascimento em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(Conta.equals("")||Conta.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo NÂº da Conta em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(Login.equals("")||Login.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo Login em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(Senha.equals("")||Senha.equals(" ")){
//            JOptionPane.showMessageDialog(null, "Campo Senha em branco.", "Erro!", JOptionPane.OK_OPTION);
//            valida = false;
//        }
//        if(valida = true){
//        try {
//            //Abrindo conexÃ£o
//            int serverPort = 1001;
//            switch (servidor){
//                case 1:{socket = new Socket(banco.cliente.deprecated.Login.servidorA.toString(), serverPort);
//                        break;
//                }
//                case 2:{socket = new Socket(banco.cliente.deprecated.Login.servidorB.toString(), serverPort);
//                        break;
//                }
//                case 3:{socket = new Socket(banco.cliente.deprecated.Login.servidorC.toString(), serverPort);
//                        break;
//                }
//                default:JOptionPane.showMessageDialog(null, "Falha no servidor!", "Erro!", JOptionPane.ERROR_MESSAGE);
//            }
//            ObjectOutputStream saida = new ObjectOutputStream(socket.getOutputStream());
//            saida.writeObject(msg);
//            saida.flush();
//            ObjectInputStream entrada = new ObjectInputStream(socket.getInputStream());
//            entrada.read();
//            resposta = entrada.toString();
//            if (resposta.equals("0")){
//                JOptionPane.showMessageDialog(null, "Falha ao efetuar cadastro.", "Erro!", JOptionPane.ERROR_MESSAGE);
//            }else if(resposta.equals("1")){
//                JOptionPane.showMessageDialog(null, "Cadastro efetuado com sucesso!", "", JOptionPane.OK_OPTION);
//                dispose();
//                Login login = new Login();
//                login.setLocationRelativeTo(null);
//                login.setVisible(true);
//            }
//        }catch (UnknownHostException e){
//            JOptionPane.showMessageDialog(null, "Sock:"+e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
//            //System.out.println("Sock:"+e.getMessage());
//        }catch (EOFException e){
//            JOptionPane.showMessageDialog(null, "EOF:"+e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
//            //System.out.println("EOF:"+e.getMessage());
//        }catch (IOException e){
//            JOptionPane.showMessageDialog(null, "IO:"+e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
//            //System.out.println("IO:"+e.getMessage());
//        } finally {
//            if(socket!=null)
//            try {
//                socket.close();
//            }
//            catch (IOException e){
//                JOptionPane.showMessageDialog(null, "Close:"+e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
//                //System.out.println("close:"+e.getMessage());
//            }
//        }// try
//      }
    }//GEN-LAST:event_btnCadastrarActionPerformed

	private void exibeDialogErro(String message) {
		JOptionPane.showMessageDialog(null, message, "Erro!", JOptionPane.OK_OPTION);
	}

   

}
